[{"/home/sankeyl062/react-assignment1/src/index.tsx":"1","/home/sankeyl062/react-assignment1/src/reportWebVitals.ts":"2","/home/sankeyl062/react-assignment1/src/App.tsx":"3","/home/sankeyl062/react-assignment1/src/Components/Usercard.tsx":"4"},{"size":692,"mtime":1611674340246,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1611502024662,"results":"7","hashOfConfig":"6"},{"size":4094,"mtime":1611599966987,"results":"8","hashOfConfig":"6"},{"size":1335,"mtime":1611674246877,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"wp1p08",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sankeyl062/react-assignment1/src/index.tsx",["20"],"/home/sankeyl062/react-assignment1/src/reportWebVitals.ts",[],["21","22"],"/home/sankeyl062/react-assignment1/src/App.tsx",["23","24","25","26","27","28","29","30"],"import React from 'react';\nimport { useState , useRef} from 'react';\nimport logo from './logo.svg';\nimport Usercard from './Components/Usercard';\nimport './App.css';\nimport { readFileSync } from 'fs';\n\nexport type UserDataObject={\n  id:number;\n  name: string;\n  address: string;\n  city: string;\n\n}\n\n\nconst App: React.FC = () =>{\n  const [userData, setUserData] = useState<UserDataObject[]>([]);\n  const [count, setCount] = useState(0);\n  const[idForUpdate,setUpdateId]=useState(0);  \n  const [name, setName] = useState('');  \n  const [city, setCity] = useState('');  \n  const [address, setAddress] = useState('');  \n\n\n  const nameref = React.useRef(null);\n  var  userDataArray:UserDataObject[];\n  var  Inputname:string;\n  var  Inputcity:string;\n  var  Inputaddress:string;\n  var  currentId:number;\n  var  GetId:number;\n\n\n  \n  const getInputData = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setCount(count + 1);\n    const userDataObjectPush = {\n      id:count,\n      name:name,\n      city:city,\n      address:address\n    };\n    setUserData([...userData,userDataObjectPush]);\n    setName('');\n    setCity('');\n    setAddress('');\n\n\n    \n  };\n  const deleteCartData=(e: React.MouseEvent<HTMLButtonElement, MouseEvent>)=>{\n    const currentId = e.currentTarget.value;\n    var currentIdNumber: number = +currentId;\n\n    setUserData(userData.filter(user => user.id != currentIdNumber));\n    setName('');\n    setCity('');\n    setAddress('');\n\n    \n\n\n  }\n  const editSaveData=(e: React.MouseEvent<HTMLButtonElement, MouseEvent>)=>{\n    var userDataCopy=[...userData];        \n\n    //setUserData(userData.filter(user => user.id !== idForUpdate));\n\n     if(userDataCopy.length>0)\n     {\n      for(var i=0;i<userDataCopy.length;i++)\n      {\n          if(userDataCopy[i].id===idForUpdate)\n          {\n            userDataCopy[i].name=name;\n            userDataCopy[i].city=city;\n            userDataCopy[i].address=address;\n\n\n            const userDataObjectPush2 = {\n              id:idForUpdate,\n              name:name,\n              city:city,\n              address:address\n            };\n            console.log(userData[i].name);\n            setUserData(userDataCopy);\n\n  \n          }\n      }\n     }\n     else{\n       alert(\"No Data present to Edit\");\n     }     \n\n\n  }\n  const editCartData=(e: React.MouseEvent<HTMLButtonElement, MouseEvent>)=>{\n    const currentId = e.currentTarget.value;\n    var currentIdNumber: number = +currentId;\n    console.log(currentIdNumber);\n    for(var i=0;i<userData.length;i++)\n    {\n        if(userData[i].id===currentIdNumber)\n        {\n          setName(userData[i].name);\n          setCity(userData[i].address);\n          setAddress(userData[i].city);\n          setUpdateId(currentIdNumber);\n\n        }\n    }\n    console.log(idForUpdate);\n  \n\n\n  }\n  const handleNameChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n     Inputname = e.currentTarget.value;\n     setName(Inputname);\n    \n    \n\n  };\n\n  const handleCityChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n     Inputcity = e.currentTarget.value;\n     setCity(Inputcity);\n\n    \n  };\n\n  const handleAddressChange = (e:any) => {\n    Inputaddress = e.currentTarget.value;\n    setAddress(Inputaddress);\n    \n  };\n\n\n  return (\n    <div>\n    <div className=\"form\">\n      <h1>USER CART</h1>\n      <input type=\"text\" className=\"name formEntry\" ref={nameref} name=\"InputName\" placeholder=\"Name\" value={name} onChange={handleNameChange} />\n      <input type=\"text\" className=\"city formEntry\" placeholder=\"City\" name=\"InputCity\" value={city} onChange={handleCityChange}/>\n      <textarea className=\"address formEntry\" placeholder=\"Address\" name=\"InputAddress\" value={address} onChange={handleAddressChange}></textarea>\n      <button className=\"submit formEntry\" onClick={getInputData}>Submit</button>\n      <button className=\"submit formEntry\" onClick={editSaveData}>EditAndSave</button>\n\n    </div>\n      <Usercard\n        userDataArray={userData}\n        callback={(props) => deleteCartData(props)}\n        callbackForEdit={editCartData}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/home/sankeyl062/react-assignment1/src/Components/Usercard.tsx",["31","32","33","34","35"],{"ruleId":"36","severity":1,"message":"37","line":3,"column":41,"nodeType":"38","messageId":"39","endLine":3,"endColumn":45},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"36","severity":1,"message":"44","line":2,"column":21,"nodeType":"38","messageId":"39","endLine":2,"endColumn":27},{"ruleId":"36","severity":1,"message":"45","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":12},{"ruleId":"36","severity":1,"message":"46","line":6,"column":10,"nodeType":"38","messageId":"39","endLine":6,"endColumn":22},{"ruleId":"36","severity":1,"message":"47","line":27,"column":8,"nodeType":"38","messageId":"39","endLine":27,"endColumn":38},{"ruleId":"36","severity":1,"message":"48","line":31,"column":8,"nodeType":"38","messageId":"39","endLine":31,"endColumn":24},{"ruleId":"36","severity":1,"message":"49","line":32,"column":8,"nodeType":"38","messageId":"39","endLine":32,"endColumn":20},{"ruleId":"50","severity":1,"message":"51","line":56,"column":49,"nodeType":"52","messageId":"53","endLine":56,"endColumn":51},{"ruleId":"36","severity":1,"message":"54","line":81,"column":19,"nodeType":"38","messageId":"39","endLine":81,"endColumn":38},{"ruleId":"36","severity":1,"message":"55","line":3,"column":10,"nodeType":"38","messageId":"39","endLine":3,"endColumn":29},{"ruleId":"36","severity":1,"message":"45","line":7,"column":8,"nodeType":"38","messageId":"39","endLine":7,"endColumn":12},{"ruleId":"36","severity":1,"message":"56","line":19,"column":11,"nodeType":"38","messageId":"39","endLine":19,"endColumn":24},{"ruleId":"36","severity":1,"message":"57","line":22,"column":12,"nodeType":"38","messageId":"39","endLine":22,"endColumn":21},{"ruleId":"36","severity":1,"message":"58","line":22,"column":23,"nodeType":"38","messageId":"39","endLine":22,"endColumn":28},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'useRef' is defined but never used.","'logo' is defined but never used.","'readFileSync' is defined but never used.","'userDataArray' is defined but never used.","'currentId' is defined but never used.","'GetId' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'userDataObjectPush2' is assigned a value but never used.","'isPropertySignature' is defined but never used.","'getSampleData' is assigned a value but never used.","'currentId' is assigned a value but never used.","'setId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]